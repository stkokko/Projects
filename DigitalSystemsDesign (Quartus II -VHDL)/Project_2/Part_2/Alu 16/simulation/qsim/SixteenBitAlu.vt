// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/19/2017 23:38:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SixteenBitAlu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SixteenBitAlu_vlg_sample_tst(
	a,
	ainv,
	b,
	binv,
	carry,
	cin,
	oper,
	sampler_tx
);
input [0:15] a;
input  ainv;
input [0:15] b;
input  binv;
input [15:0] carry;
input  cin;
input [1:0] oper;
output sampler_tx;

reg sample;
time current_time;
always @(a or ainv or b or binv or carry or cin or oper)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SixteenBitAlu_vlg_check_tst (
	carry,
	resu,
	sampler_rx
);
input [15:0] carry;
input [15:0] resu;
input sampler_rx;

reg [15:0] carry_expected;
reg [15:0] resu_expected;

reg [15:0] carry_prev;
reg [15:0] resu_prev;

reg [15:0] carry_expected_prev;
reg [15:0] resu_expected_prev;

reg [15:0] last_carry_exp;
reg [15:0] last_resu_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	carry_prev = carry;
	resu_prev = resu;
end

// update expected /o prevs

always @(trigger)
begin
	carry_expected_prev = carry_expected;
	resu_expected_prev = resu_expected;
end


// expected resu[ 15 ]
initial
begin
	resu_expected[15] = 1'bX;
end 
// expected resu[ 14 ]
initial
begin
	resu_expected[14] = 1'bX;
end 
// expected resu[ 13 ]
initial
begin
	resu_expected[13] = 1'bX;
end 
// expected resu[ 12 ]
initial
begin
	resu_expected[12] = 1'bX;
end 
// expected resu[ 11 ]
initial
begin
	resu_expected[11] = 1'bX;
end 
// expected resu[ 10 ]
initial
begin
	resu_expected[10] = 1'bX;
end 
// expected resu[ 9 ]
initial
begin
	resu_expected[9] = 1'bX;
end 
// expected resu[ 8 ]
initial
begin
	resu_expected[8] = 1'bX;
end 
// expected resu[ 7 ]
initial
begin
	resu_expected[7] = 1'bX;
end 
// expected resu[ 6 ]
initial
begin
	resu_expected[6] = 1'bX;
end 
// expected resu[ 5 ]
initial
begin
	resu_expected[5] = 1'bX;
end 
// expected resu[ 4 ]
initial
begin
	resu_expected[4] = 1'bX;
end 
// expected resu[ 3 ]
initial
begin
	resu_expected[3] = 1'bX;
end 
// expected resu[ 2 ]
initial
begin
	resu_expected[2] = 1'bX;
end 
// expected resu[ 1 ]
initial
begin
	resu_expected[1] = 1'bX;
end 
// expected resu[ 0 ]
initial
begin
	resu_expected[0] = 1'bX;
end 
// generate trigger
always @(carry_expected or carry or resu_expected or resu)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected carry = %b | expected resu = %b | ",carry_expected_prev,resu_expected_prev);
	$display("| real carry = %b | real resu = %b | ",carry_prev,resu_prev);
`endif
	if (
		( carry_expected_prev[0] !== 1'bx ) && ( carry_prev[0] !== carry_expected_prev[0] )
		&& ((carry_expected_prev[0] !== last_carry_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[0] = carry_expected_prev[0];
	end
	if (
		( carry_expected_prev[1] !== 1'bx ) && ( carry_prev[1] !== carry_expected_prev[1] )
		&& ((carry_expected_prev[1] !== last_carry_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[1] = carry_expected_prev[1];
	end
	if (
		( carry_expected_prev[2] !== 1'bx ) && ( carry_prev[2] !== carry_expected_prev[2] )
		&& ((carry_expected_prev[2] !== last_carry_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[2] = carry_expected_prev[2];
	end
	if (
		( carry_expected_prev[3] !== 1'bx ) && ( carry_prev[3] !== carry_expected_prev[3] )
		&& ((carry_expected_prev[3] !== last_carry_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[3] = carry_expected_prev[3];
	end
	if (
		( carry_expected_prev[4] !== 1'bx ) && ( carry_prev[4] !== carry_expected_prev[4] )
		&& ((carry_expected_prev[4] !== last_carry_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[4] = carry_expected_prev[4];
	end
	if (
		( carry_expected_prev[5] !== 1'bx ) && ( carry_prev[5] !== carry_expected_prev[5] )
		&& ((carry_expected_prev[5] !== last_carry_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[5] = carry_expected_prev[5];
	end
	if (
		( carry_expected_prev[6] !== 1'bx ) && ( carry_prev[6] !== carry_expected_prev[6] )
		&& ((carry_expected_prev[6] !== last_carry_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[6] = carry_expected_prev[6];
	end
	if (
		( carry_expected_prev[7] !== 1'bx ) && ( carry_prev[7] !== carry_expected_prev[7] )
		&& ((carry_expected_prev[7] !== last_carry_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[7] = carry_expected_prev[7];
	end
	if (
		( carry_expected_prev[8] !== 1'bx ) && ( carry_prev[8] !== carry_expected_prev[8] )
		&& ((carry_expected_prev[8] !== last_carry_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[8] = carry_expected_prev[8];
	end
	if (
		( carry_expected_prev[9] !== 1'bx ) && ( carry_prev[9] !== carry_expected_prev[9] )
		&& ((carry_expected_prev[9] !== last_carry_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[9] = carry_expected_prev[9];
	end
	if (
		( carry_expected_prev[10] !== 1'bx ) && ( carry_prev[10] !== carry_expected_prev[10] )
		&& ((carry_expected_prev[10] !== last_carry_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[10] = carry_expected_prev[10];
	end
	if (
		( carry_expected_prev[11] !== 1'bx ) && ( carry_prev[11] !== carry_expected_prev[11] )
		&& ((carry_expected_prev[11] !== last_carry_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[11] = carry_expected_prev[11];
	end
	if (
		( carry_expected_prev[12] !== 1'bx ) && ( carry_prev[12] !== carry_expected_prev[12] )
		&& ((carry_expected_prev[12] !== last_carry_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[12] = carry_expected_prev[12];
	end
	if (
		( carry_expected_prev[13] !== 1'bx ) && ( carry_prev[13] !== carry_expected_prev[13] )
		&& ((carry_expected_prev[13] !== last_carry_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[13] = carry_expected_prev[13];
	end
	if (
		( carry_expected_prev[14] !== 1'bx ) && ( carry_prev[14] !== carry_expected_prev[14] )
		&& ((carry_expected_prev[14] !== last_carry_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[14] = carry_expected_prev[14];
	end
	if (
		( carry_expected_prev[15] !== 1'bx ) && ( carry_prev[15] !== carry_expected_prev[15] )
		&& ((carry_expected_prev[15] !== last_carry_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[15] = carry_expected_prev[15];
	end
	if (
		( resu_expected_prev[0] !== 1'bx ) && ( resu_prev[0] !== resu_expected_prev[0] )
		&& ((resu_expected_prev[0] !== last_resu_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[0] = resu_expected_prev[0];
	end
	if (
		( resu_expected_prev[1] !== 1'bx ) && ( resu_prev[1] !== resu_expected_prev[1] )
		&& ((resu_expected_prev[1] !== last_resu_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[1] = resu_expected_prev[1];
	end
	if (
		( resu_expected_prev[2] !== 1'bx ) && ( resu_prev[2] !== resu_expected_prev[2] )
		&& ((resu_expected_prev[2] !== last_resu_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[2] = resu_expected_prev[2];
	end
	if (
		( resu_expected_prev[3] !== 1'bx ) && ( resu_prev[3] !== resu_expected_prev[3] )
		&& ((resu_expected_prev[3] !== last_resu_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[3] = resu_expected_prev[3];
	end
	if (
		( resu_expected_prev[4] !== 1'bx ) && ( resu_prev[4] !== resu_expected_prev[4] )
		&& ((resu_expected_prev[4] !== last_resu_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[4] = resu_expected_prev[4];
	end
	if (
		( resu_expected_prev[5] !== 1'bx ) && ( resu_prev[5] !== resu_expected_prev[5] )
		&& ((resu_expected_prev[5] !== last_resu_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[5] = resu_expected_prev[5];
	end
	if (
		( resu_expected_prev[6] !== 1'bx ) && ( resu_prev[6] !== resu_expected_prev[6] )
		&& ((resu_expected_prev[6] !== last_resu_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[6] = resu_expected_prev[6];
	end
	if (
		( resu_expected_prev[7] !== 1'bx ) && ( resu_prev[7] !== resu_expected_prev[7] )
		&& ((resu_expected_prev[7] !== last_resu_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[7] = resu_expected_prev[7];
	end
	if (
		( resu_expected_prev[8] !== 1'bx ) && ( resu_prev[8] !== resu_expected_prev[8] )
		&& ((resu_expected_prev[8] !== last_resu_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[8] = resu_expected_prev[8];
	end
	if (
		( resu_expected_prev[9] !== 1'bx ) && ( resu_prev[9] !== resu_expected_prev[9] )
		&& ((resu_expected_prev[9] !== last_resu_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[9] = resu_expected_prev[9];
	end
	if (
		( resu_expected_prev[10] !== 1'bx ) && ( resu_prev[10] !== resu_expected_prev[10] )
		&& ((resu_expected_prev[10] !== last_resu_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[10] = resu_expected_prev[10];
	end
	if (
		( resu_expected_prev[11] !== 1'bx ) && ( resu_prev[11] !== resu_expected_prev[11] )
		&& ((resu_expected_prev[11] !== last_resu_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[11] = resu_expected_prev[11];
	end
	if (
		( resu_expected_prev[12] !== 1'bx ) && ( resu_prev[12] !== resu_expected_prev[12] )
		&& ((resu_expected_prev[12] !== last_resu_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[12] = resu_expected_prev[12];
	end
	if (
		( resu_expected_prev[13] !== 1'bx ) && ( resu_prev[13] !== resu_expected_prev[13] )
		&& ((resu_expected_prev[13] !== last_resu_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[13] = resu_expected_prev[13];
	end
	if (
		( resu_expected_prev[14] !== 1'bx ) && ( resu_prev[14] !== resu_expected_prev[14] )
		&& ((resu_expected_prev[14] !== last_resu_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[14] = resu_expected_prev[14];
	end
	if (
		( resu_expected_prev[15] !== 1'bx ) && ( resu_prev[15] !== resu_expected_prev[15] )
		&& ((resu_expected_prev[15] !== last_resu_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resu_expected_prev);
		$display ("     Real value = %b", resu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resu_exp[15] = resu_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#180000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SixteenBitAlu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:15] a;
reg ainv;
reg [0:15] b;
reg binv;
reg [15:0] treg_carry;
reg cin;
reg [1:0] oper;
// wires                                               
wire [15:0] carry;
wire [15:0] resu;

wire sampler;                             

// assign statements (if any)                          
assign carry = treg_carry;
SixteenBitAlu i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.ainv(ainv),
	.b(b),
	.binv(binv),
	.carry(carry),
	.cin(cin),
	.oper(oper),
	.resu(resu)
);
// a[ 15 ]
initial
begin
	a[15] = 1'b1;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b1;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b1;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b1;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b1;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b1;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b1;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b1;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 

// ainv
initial
begin
	ainv = 1'b0;
end 
// b[ 15 ]
initial
begin
	b[15] = 1'b1;
end 
// b[ 14 ]
initial
begin
	b[14] = 1'b0;
end 
// b[ 13 ]
initial
begin
	b[13] = 1'b1;
end 
// b[ 12 ]
initial
begin
	b[12] = 1'b0;
end 
// b[ 11 ]
initial
begin
	b[11] = 1'b0;
end 
// b[ 10 ]
initial
begin
	b[10] = 1'b1;
end 
// b[ 9 ]
initial
begin
	b[9] = 1'b0;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b1;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b1;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b1;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
end 

// binv
initial
begin
	binv = 1'b0;
end 
// carry[ 15 ]
initial
begin
	treg_carry[15] = 1'bZ;
end 
// carry[ 14 ]
initial
begin
	treg_carry[14] = 1'bZ;
end 
// carry[ 13 ]
initial
begin
	treg_carry[13] = 1'bZ;
end 
// carry[ 12 ]
initial
begin
	treg_carry[12] = 1'bZ;
end 
// carry[ 11 ]
initial
begin
	treg_carry[11] = 1'bZ;
end 
// carry[ 10 ]
initial
begin
	treg_carry[10] = 1'bZ;
end 
// carry[ 9 ]
initial
begin
	treg_carry[9] = 1'bZ;
end 
// carry[ 8 ]
initial
begin
	treg_carry[8] = 1'bZ;
end 
// carry[ 7 ]
initial
begin
	treg_carry[7] = 1'bZ;
end 
// carry[ 6 ]
initial
begin
	treg_carry[6] = 1'bZ;
end 
// carry[ 5 ]
initial
begin
	treg_carry[5] = 1'bZ;
end 
// carry[ 4 ]
initial
begin
	treg_carry[4] = 1'bZ;
end 
// carry[ 3 ]
initial
begin
	treg_carry[3] = 1'bZ;
end 
// carry[ 2 ]
initial
begin
	treg_carry[2] = 1'bZ;
end 
// carry[ 1 ]
initial
begin
	treg_carry[1] = 1'bZ;
end 
// carry[ 0 ]
initial
begin
	treg_carry[0] = 1'bZ;
end 

// cin
initial
begin
	cin = 1'b0;
end 
// oper[ 1 ]
initial
begin
	oper[1] = 1'b1;
end 
// oper[ 0 ]
initial
begin
	oper[0] = 1'b0;
end 

SixteenBitAlu_vlg_sample_tst tb_sample (
	.a(a),
	.ainv(ainv),
	.b(b),
	.binv(binv),
	.carry(carry),
	.cin(cin),
	.oper(oper),
	.sampler_tx(sampler)
);

SixteenBitAlu_vlg_check_tst tb_out(
	.carry(carry),
	.resu(resu),
	.sampler_rx(sampler)
);
endmodule

