library ieee;
use ieee.std_logic.all;

entity control_unit is
	port(opcode :in std_logic_vector(0 to 3);
		  oper :in std_logic_vector(1 downto 0);
		  ainv,binv,cin : in std_logic);
end control_unit;

architecture behaivoral of control_unit is 
begin
  process (opcode)
  begin
	if opcode = "000" then
		oper <= "00";
		ainv <= '0';
		binv <= '0';
		cin <= '0';	
	elsif opcode = "001" then 
		oper <= "01";
		ainv <= '0';
		binv <= '0';
		cin <= '0';	
	elsif opcode = "011" then 
		oper <= "11";
		ainv <= '0';
		binv <= '0';
		cin <= '0';	
	elsif opcode = "010" then 
		oper <= "11";
		ainv <= '0';
		binv <= '1';
		cin <= '1';
	elsif opcode = "101" then 
		oper <= "00";
		ainv <= '1';
		binv <= '1';
		cin <= '0';
	elsif opcode = "100" then 
		oper <= "10";
		ainv <= '0';
		binv <= '0';
		cin <= '0';
	elsif opcode = "110" then 
		oper <= "10";
		ainv <= '1';
		binv <= '0';
		cin <= '1';
	elsif opcode = "111" then 
		oper <= "11";
		ainv <= '1';
		binv <= '0';
		cin <= '1';
	end if;
	end process;
end behaivoral;

library ieee;
use ieee.std_logic.all;
package control_unit_pack is 
component control_unit is 
	port(opcode :in std_logic_vector(0 to 3);
		  oper :in std_logic_vector(1 downto 0);
		  ainv,binv,cin : in std_logic);
end component;
end control_untit_pack;
